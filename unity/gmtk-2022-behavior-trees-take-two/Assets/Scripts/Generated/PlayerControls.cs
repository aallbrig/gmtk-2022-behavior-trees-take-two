//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Resources/ControlSchemes/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Generated
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Master Chief"",
            ""id"": ""3ecf193e-a83c-434d-94e5-ccf825a2be53"",
            ""actions"": [
                {
                    ""name"": ""PointerButtonPress"",
                    ""type"": ""Button"",
                    ""id"": ""b53f5f47-ce1b-409b-8aca-facfae35cf8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""43b56b21-1ed7-4dbe-b634-864bb190c466"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""a7f3863c-7efc-4811-a574-0332ac31a72a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10f2c58d-aa72-4122-aa42-23955ff6d788"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerButtonPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4af5300-9cc1-4ef0-a8bf-43185941f6d6"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerButtonPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6c8a7dd-c756-4649-8204-394b843e1c52"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b31034ab-1bee-4967-a5d2-38c23fb1fa3d"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""605feb0e-8f13-4541-b680-1bd12176720b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Master Chief
            m_MasterChief = asset.FindActionMap("Master Chief", throwIfNotFound: true);
            m_MasterChief_PointerButtonPress = m_MasterChief.FindAction("PointerButtonPress", throwIfNotFound: true);
            m_MasterChief_PointerPosition = m_MasterChief.FindAction("PointerPosition", throwIfNotFound: true);
            m_MasterChief_MoveJoystick = m_MasterChief.FindAction("MoveJoystick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Master Chief
        private readonly InputActionMap m_MasterChief;
        private IMasterChiefActions m_MasterChiefActionsCallbackInterface;
        private readonly InputAction m_MasterChief_PointerButtonPress;
        private readonly InputAction m_MasterChief_PointerPosition;
        private readonly InputAction m_MasterChief_MoveJoystick;
        public struct MasterChiefActions
        {
            private @PlayerControls m_Wrapper;
            public MasterChiefActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerButtonPress => m_Wrapper.m_MasterChief_PointerButtonPress;
            public InputAction @PointerPosition => m_Wrapper.m_MasterChief_PointerPosition;
            public InputAction @MoveJoystick => m_Wrapper.m_MasterChief_MoveJoystick;
            public InputActionMap Get() { return m_Wrapper.m_MasterChief; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MasterChiefActions set) { return set.Get(); }
            public void SetCallbacks(IMasterChiefActions instance)
            {
                if (m_Wrapper.m_MasterChiefActionsCallbackInterface != null)
                {
                    @PointerButtonPress.started -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnPointerButtonPress;
                    @PointerButtonPress.performed -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnPointerButtonPress;
                    @PointerButtonPress.canceled -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnPointerButtonPress;
                    @PointerPosition.started -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.performed -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.canceled -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnPointerPosition;
                    @MoveJoystick.started -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnMoveJoystick;
                    @MoveJoystick.performed -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnMoveJoystick;
                    @MoveJoystick.canceled -= m_Wrapper.m_MasterChiefActionsCallbackInterface.OnMoveJoystick;
                }
                m_Wrapper.m_MasterChiefActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PointerButtonPress.started += instance.OnPointerButtonPress;
                    @PointerButtonPress.performed += instance.OnPointerButtonPress;
                    @PointerButtonPress.canceled += instance.OnPointerButtonPress;
                    @PointerPosition.started += instance.OnPointerPosition;
                    @PointerPosition.performed += instance.OnPointerPosition;
                    @PointerPosition.canceled += instance.OnPointerPosition;
                    @MoveJoystick.started += instance.OnMoveJoystick;
                    @MoveJoystick.performed += instance.OnMoveJoystick;
                    @MoveJoystick.canceled += instance.OnMoveJoystick;
                }
            }
        }
        public MasterChiefActions @MasterChief => new MasterChiefActions(this);
        public interface IMasterChiefActions
        {
            void OnPointerButtonPress(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnMoveJoystick(InputAction.CallbackContext context);
        }
    }
}
